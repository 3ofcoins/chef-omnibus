require 'stringio'
require 'spec_helper'

module Omnibus
  describe Packager::PKG do
    let(:expected_distribution_content) do
      <<-EOH
<?xml version="1.0" standalone="no"?>
<installer-gui-script minSpecVersion="1">
    <title>Project</title>
    <background file="background.png" alignment="bottomleft" mime-type="image/png"/>
    <welcome file="welcome.html" mime-type="text/html"/>
    <license file="license.html" mime-type="text/html"/>

    <!-- Generated by productbuild - - synthesize -->
    <pkg-ref id="com.getchef.project"/>
    <options customize="never" require-scripts="false"/>
    <choices-outline>
        <line choice="default">
            <line choice="com.getchef.project"/>
        </line>
    </choices-outline>
    <choice id="default"/>
    <choice id="com.getchef.project" visible="false">
        <pkg-ref id="com.getchef.project"/>
    </choice>
    <pkg-ref id="com.getchef.project" version="1.2.3" onConclusion="none">project-core.pkg</pkg-ref>
</installer-gui-script>
  EOH
    end

    let(:expected_distribution_path) { '/staging/dir/Distribution' }

    let(:project) do
      Project.new.tap do |project|
        project.name('project')
        project.install_dir('/opt/project')
        project.build_version('1.2.3')
        project.build_iteration('2')
        project.maintainer('Chef Software')
        project.mac_pkg_identifier('com.getchef.project')
      end
    end

    subject { described_class.new(project) }

    before do
      Config.package_dir('/package/dir')
      Config.project_root('/project/root')

      allow(subject).to receive(:staging_dir)
        .and_return('/staging/dir')
    end

    it 'names the component package PROJECT_NAME-core.pkg' do
      expect(subject.component_pkg).to eq('project-core.pkg')
    end

    it 'names the product package PROJECT_NAME.pkg' do
      expect(subject.package_name).to eq('project-1.2.3-2.pkg')
    end

    it 'runs pkgbuild' do
      expect(subject).to receive(:execute).with <<-EOH.gsub(/^ {8}/, '')
        pkgbuild \\
          --identifier "com.getchef.project" \\
          --version "1.2.3" \\
          --scripts "/project/root/package-scripts/project" \\
          --root "/opt/project" \\
          --install-location "/opt/project" \\
          "project-core.pkg"
      EOH
      subject.build_component_pkg
    end

    it 'generates a Distribution file describing the product package content' do
      file = StringIO.new
      allow(File).to receive(:open).with(any_args).and_yield(file)

      expect(file).to receive(:puts).with(expected_distribution_content)
      subject.generate_distribution
    end

    describe 'generating the distribution file' do
      let(:distribution_file) { StringIO.new }

      before do
        expect(File).to receive(:open)
          .with(expected_distribution_path, 'w', 0600)
          .and_yield(distribution_file)
      end

      it 'writes the distribution file to the staging directory' do
        subject.generate_distribution
        expect(distribution_file.string).to eq(expected_distribution_content)
      end
    end

    describe '#build_product_pkg' do
      context 'when pkg signing is disabled' do
        it 'generates the distribution and runs productbuild' do
          expect(subject).to receive(:execute).with <<-EOH.gsub(/^ {12}/, '')
            productbuild \\
              --distribution "/staging/dir/Distribution" \\
              --resources "/staging/dir/Resources" \\
              "/package/dir/project-1.2.3-2.pkg"
          EOH

          subject.build_product_pkg
        end
      end

      context 'when pkg signing is enabled' do
        before do
          Config.sign_pkg(true)
          Config.signing_identity('My Special Identity')
        end

        it 'includes the signing parameters in the product build command' do
          expect(subject).to receive(:execute).with  <<-EOH.gsub(/^ {12}/, '')
            productbuild \\
              --distribution "/staging/dir/Distribution" \\
              --resources "/staging/dir/Resources" \\
              --sign "My Special Identity" \\
              "/package/dir/project-1.2.3-2.pkg"
            EOH
          subject.build_product_pkg
        end
      end

      context "when the mac_pkg_identifier isn't specified by the project" do
        before do
          project.mac_pkg_identifier(nil)
          project.name('$Project#')
        end

        it 'uses com.example.PROJECT_NAME as the identifier' do
          expect(subject.identifier).to eq('test.chefsoftware.pkg.project')
        end
      end
    end
  end
end
